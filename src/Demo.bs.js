// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var OutOfBound = Caml_exceptions.create("Demo-Tictactoe.OutOfBound");

function displayPlayer(player) {
  if (player) {
    return "X";
  } else {
    return "O";
  }
}

function proceedGame(gameState, newMove) {
  return {
          currentPlayer: gameState.currentPlayer,
          history: List.append(gameState.history, /* :: */[
                /* tuple */[
                  gameState.currentPlayer,
                  newMove
                ],
                /* [] */0
              ]),
          board: gameState.board,
          won: gameState.won
        };
}

function renderBoard(board) {
  var combineColumns = function (param) {
    return $$String.concat("", param);
  };
  var param = List.map(combineColumns, board);
  return $$String.concat("\n", param);
}

function renderGame(gameState) {
  return renderBoard(gameState.board);
}

var initialBoard = /* :: */[
  /* :: */[
    "_",
    /* :: */[
      "X",
      /* :: */[
        "_",
        /* [] */0
      ]
    ]
  ],
  /* :: */[
    /* :: */[
      "_",
      /* :: */[
        "_",
        /* :: */[
          "_",
          /* [] */0
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        "_",
        /* :: */[
          "_",
          /* :: */[
            "_",
            /* [] */0
          ]
        ]
      ],
      /* [] */0
    ]
  ]
];

var sample = {
  currentPlayer: /* White */0,
  history: /* [] */0,
  board: initialBoard,
  won: false
};

console.log("Starting Game");

console.log(renderBoard(initialBoard));

exports.OutOfBound = OutOfBound;
exports.displayPlayer = displayPlayer;
exports.proceedGame = proceedGame;
exports.renderBoard = renderBoard;
exports.renderGame = renderGame;
exports.initialBoard = initialBoard;
exports.sample = sample;
/*  Not a pure module */
