// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var OutOfBound = Caml_exceptions.create("Demo-Tictactoe.OutOfBound");

function displayPlayer(player) {
  if (player) {
    return "X";
  } else {
    return "O";
  }
}

function getPos(board, pos) {
  return List.nth(List.nth(board, pos[0]), pos[1]);
}

function isWin(board, player) {
  var checkCondition = function (condition) {
    return List.for_all((function (pos) {
                  return getPos(board, pos) === (
                          player ? "X" : "O"
                        );
                }), condition);
  };
  return List.exists(checkCondition, /* :: */[
              /* :: */[
                /* tuple */[
                  0,
                  0
                ],
                /* :: */[
                  /* tuple */[
                    0,
                    1
                  ],
                  /* :: */[
                    /* tuple */[
                      0,
                      2
                    ],
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* tuple */[
                    1,
                    0
                  ],
                  /* :: */[
                    /* tuple */[
                      1,
                      1
                    ],
                    /* :: */[
                      /* tuple */[
                        1,
                        2
                      ],
                      /* [] */0
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* tuple */[
                      2,
                      0
                    ],
                    /* :: */[
                      /* tuple */[
                        2,
                        1
                      ],
                      /* :: */[
                        /* tuple */[
                          2,
                          2
                        ],
                        /* [] */0
                      ]
                    ]
                  ],
                  /* :: */[
                    /* :: */[
                      /* tuple */[
                        0,
                        0
                      ],
                      /* :: */[
                        /* tuple */[
                          1,
                          0
                        ],
                        /* :: */[
                          /* tuple */[
                            2,
                            0
                          ],
                          /* [] */0
                        ]
                      ]
                    ],
                    /* :: */[
                      /* :: */[
                        /* tuple */[
                          0,
                          1
                        ],
                        /* :: */[
                          /* tuple */[
                            1,
                            1
                          ],
                          /* :: */[
                            /* tuple */[
                              2,
                              1
                            ],
                            /* [] */0
                          ]
                        ]
                      ],
                      /* :: */[
                        /* :: */[
                          /* tuple */[
                            0,
                            2
                          ],
                          /* :: */[
                            /* tuple */[
                              1,
                              2
                            ],
                            /* :: */[
                              /* tuple */[
                                2,
                                2
                              ],
                              /* [] */0
                            ]
                          ]
                        ],
                        /* :: */[
                          /* :: */[
                            /* tuple */[
                              0,
                              0
                            ],
                            /* :: */[
                              /* tuple */[
                                1,
                                1
                              ],
                              /* :: */[
                                /* tuple */[
                                  2,
                                  2
                                ],
                                /* [] */0
                              ]
                            ]
                          ],
                          /* :: */[
                            /* :: */[
                              /* tuple */[
                                0,
                                2
                              ],
                              /* :: */[
                                /* tuple */[
                                  1,
                                  1
                                ],
                                /* :: */[
                                  /* tuple */[
                                    2,
                                    0
                                  ],
                                  /* [] */0
                                ]
                              ]
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function updateBoard(board, move) {
  var match = move[1];
  var y = match[1];
  var x = match[0];
  var player = move[0];
  return List.mapi((function (rowIndex, row) {
                if (rowIndex === x) {
                  return List.mapi((function (colIndex, value) {
                                if (colIndex === y) {
                                  if (player) {
                                    return "X";
                                  } else {
                                    return "O";
                                  }
                                } else {
                                  return value;
                                }
                              }), row);
                } else {
                  return row;
                }
              }), board);
}

function proceedGame(gameState, newMove) {
  var newBoard = updateBoard(gameState.board, /* tuple */[
        gameState.currentPlayer,
        newMove
      ]);
  var match = gameState.currentPlayer === /* Black */1;
  return {
          currentPlayer: match ? /* White */0 : /* Black */1,
          history: List.append(gameState.history, /* :: */[
                /* tuple */[
                  gameState.currentPlayer,
                  newMove
                ],
                /* [] */0
              ]),
          board: newBoard,
          won: isWin(newBoard, gameState.currentPlayer)
        };
}

function renderBoard(board) {
  var combineColumns = function (param) {
    return $$String.concat("", param);
  };
  var param = List.map(combineColumns, board);
  return $$String.concat("\n", param);
}

function renderGame(gameState) {
  return renderBoard(gameState.board);
}

function startGame(param) {
  var initialGameState_board = /* :: */[
    /* :: */[
      "_",
      /* :: */[
        "_",
        /* :: */[
          "_",
          /* [] */0
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        "_",
        /* :: */[
          "_",
          /* :: */[
            "_",
            /* [] */0
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          "_",
          /* :: */[
            "_",
            /* :: */[
              "_",
              /* [] */0
            ]
          ]
        ],
        /* [] */0
      ]
    ]
  ];
  var initialGameState = {
    currentPlayer: /* White */0,
    history: /* [] */0,
    board: initialGameState_board,
    won: false
  };
  var moves = /* :: */[
    /* tuple */[
      /* White */0,
      /* tuple */[
        1,
        1
      ]
    ],
    /* :: */[
      /* tuple */[
        /* Black */1,
        /* tuple */[
          0,
          1
        ]
      ],
      /* :: */[
        /* tuple */[
          /* White */0,
          /* tuple */[
            1,
            2
          ]
        ],
        /* :: */[
          /* tuple */[
            /* Black */1,
            /* tuple */[
              2,
              2
            ]
          ],
          /* :: */[
            /* tuple */[
              /* White */0,
              /* tuple */[
                1,
                0
              ]
            ],
            /* [] */0
          ]
        ]
      ]
    ]
  ];
  var index = 0;
  var $$break = false;
  var gameState = initialGameState;
  console.log("Starting Game");
  while(List.length(gameState.history) > 9 || index < List.length(moves)) {
    var match = List.nth(moves, index);
    var match$1 = match[1];
    var y = match$1[1];
    var x = match$1[0];
    gameState = proceedGame(gameState, /* tuple */[
          x,
          y
        ]);
    console.log("Player<" + ((
            match[0] ? "X" : "O"
          ) + ("> placed position<" + (String(x) + ("," + (String(y) + ">."))))));
    console.log(renderBoard(gameState.board));
    console.log("========================");
    if (gameState.won) {
      $$break = true;
    }
    index = index + 1 | 0;
  };
  if (gameState.won) {
    var player = gameState.currentPlayer ? /* White */0 : /* Black */1;
    console.log("Winner is: " + ((
            player ? "X" : "O"
          ) + "!"));
    return /* () */0;
  } else {
    console.log("No one won!");
    return /* () */0;
  }
}

startGame(/* () */0);

exports.OutOfBound = OutOfBound;
exports.displayPlayer = displayPlayer;
exports.getPos = getPos;
exports.isWin = isWin;
exports.updateBoard = updateBoard;
exports.proceedGame = proceedGame;
exports.renderBoard = renderBoard;
exports.renderGame = renderGame;
exports.startGame = startGame;
/*  Not a pure module */
