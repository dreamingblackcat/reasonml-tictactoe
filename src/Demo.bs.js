// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var OutOfBound = Caml_exceptions.create("Demo-Tictactoe.OutOfBound");

function displayPlayer(player) {
  if (player) {
    return "X";
  } else {
    return "O";
  }
}

function updateBoard(board, move) {
  var match = move[1];
  var y = match[1];
  var x = match[0];
  var player = move[0];
  return List.mapi((function (rowIndex, row) {
                if (rowIndex === x) {
                  return List.mapi((function (colIndex, value) {
                                if (colIndex === y) {
                                  if (player) {
                                    return "X";
                                  } else {
                                    return "O";
                                  }
                                } else {
                                  return value;
                                }
                              }), row);
                } else {
                  return row;
                }
              }), board);
}

function proceedGame(gameState, newMove) {
  var newBoard = updateBoard(gameState.board, /* tuple */[
        gameState.currentPlayer,
        newMove
      ]);
  var match = gameState.currentPlayer === /* Black */1;
  return {
          currentPlayer: match ? /* White */0 : /* Black */1,
          history: List.append(gameState.history, /* :: */[
                /* tuple */[
                  gameState.currentPlayer,
                  newMove
                ],
                /* [] */0
              ]),
          board: newBoard,
          won: gameState.won
        };
}

function renderBoard(board) {
  var combineColumns = function (param) {
    return $$String.concat("", param);
  };
  var param = List.map(combineColumns, board);
  return $$String.concat("\n", param);
}

function renderGame(gameState) {
  return renderBoard(gameState.board);
}

function startGame(param) {
  console.log("Starting Game");
  console.log(renderBoard(/* :: */[
            /* :: */[
              "_",
              /* :: */[
                "_",
                /* :: */[
                  "_",
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                "_",
                /* :: */[
                  "_",
                  /* :: */[
                    "_",
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  "_",
                  /* :: */[
                    "_",
                    /* :: */[
                      "_",
                      /* [] */0
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]));
  return /* () */0;
}

startGame(/* () */0);

exports.OutOfBound = OutOfBound;
exports.displayPlayer = displayPlayer;
exports.updateBoard = updateBoard;
exports.proceedGame = proceedGame;
exports.renderBoard = renderBoard;
exports.renderGame = renderGame;
exports.startGame = startGame;
/*  Not a pure module */
